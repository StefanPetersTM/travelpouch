name: Android Build

on:
  workflow_dispatch:
    inputs:
      name:
        description: "Ex: milestone name"
        default: "Mn"
        required: true
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'  
          java-version: '17'
            
      # Load google-services.json and local.properties from the secrets
      - name: Decode secrets
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
          # LOCAL_PROPERTIES: ${{ secrets.LOCAL_PROPERTIES }}
        run: |
          echo "$GOOGLE_SERVICES" | base64 --decode > ./app/google-services.json

      - name: Set permissions for google-services.json
        run: chmod 644 ./app/google-services.json

      - name: Generate Debug Keystore if Missing
        run: |
          if [ ! -f "~/.android/debug.keystore" ]; then
            mkdir -p ~/.android
            keytool -genkey -v -keystore ~/.android/debug.keystore -alias androiddebugkey \
              -storepass android -keypass android -keyalg RSA -validity 10000 -dname "CN=Android Debug,O=Android,C=US"
          fi

      - name: Extract SHA-1 Fingerprint from Debug Keystore
        id: extract_sha1
        run: |
          SHA1=$(keytool -list -v \
              -keystore ~/.android/debug.keystore \
              -alias androiddebugkey \
              -storepass android \
              -keypass android | grep 'SHA1' | awk '{print $2}')
          echo "SHA1=${SHA1}" >> $GITHUB_ENV
          echo "SHA1 fingerprint: ${SHA1}"

      - name: Build APK Debug with Custom Key
        run: ./gradlew clean assembleDebug -Psigning.store=~/.android/debug.keystore -Psigning.storePassword=android -Psigning.keyAlias=androiddebugkey -Psigning.keyPassword=android --info

      - name: Check that the APK was really signed with the provided key
        run: jarsigner -verify -verbose app/build/outputs/apk/debug/app-debug.apk
        
      - name: List APK files
        run: |
          find app/build/outputs/apk -type f

      - name: Upload APK
        uses: actions/upload-artifact@v3
        with:
          name: "${{ github.event.inputs.name }}-Debug-APK"
          path: app/build/outputs/apk/debug/*.apk

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: ${{ github.event.inputs.name }} (#${{ github.run_number }})
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: app/build/outputs/apk/debug/app-debug.apk
          asset_name: TravelPouch.apk
          asset_content_type: application/vnd.android.package-archive
